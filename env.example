# YOLO Training Repository Environment Variables
# Copy this file to .env and fill in your actual values

# =============================================================================
# REQUIRED: Roboflow Configuration
# =============================================================================

# Your Roboflow API key (required for dataset export)
# Get this from: https://app.roboflow.com/settings/api
ROBOFLOW_API_KEY=your_roboflow_api_key_here

# Roboflow workspace name (usually your username or organization)
ROBOFLOW_WORKSPACE=your_workspace_name

# Roboflow project ID (found in project URL)
ROBOFLOW_PROJECT_ID=your_project_id

# Roboflow dataset version number
ROBOFLOW_VERSION=1

# =============================================================================
# OPTIONAL: Training Configuration
# =============================================================================

# Device to use for training (auto, cuda, cpu)
# auto = automatically detect best available device
# cuda = use GPU if available
# cpu = force CPU training
DEVICE=auto

# Number of workers for data loading (0 = main process, higher = more workers)
NUM_WORKERS=8

# Maximum GPU memory to use (in GB, 0 = use all available)
MAX_GPU_MEMORY=0

# Random seed for reproducibility
RANDOM_SEED=42

# =============================================================================
# OPTIONAL: Logging and Monitoring
# =============================================================================

# Enable Weights & Biases logging (true/false)
# Requires: pip install wandb
ENABLE_WANDB=false

# Weights & Biases project name
WANDB_PROJECT=yolo_training

# Weights & Biases entity (username or team)
WANDB_ENTITY=your_username

# Enable TensorBoard logging (true/false)
# Requires: pip install tensorboard
ENABLE_TENSORBOARD=true

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# =============================================================================
# OPTIONAL: Model Configuration
# =============================================================================

# Default YOLO model type (yolo11, yolov8, yolov5)
DEFAULT_MODEL_TYPE=yolov8

# Default model weights (will be downloaded if not local)
DEFAULT_WEIGHTS=yolov8n.pt

# Default image size for training
DEFAULT_IMAGE_SIZE=640

# Default batch size
DEFAULT_BATCH_SIZE=16

# Default number of epochs
DEFAULT_EPOCHS=100

# =============================================================================
# OPTIONAL: Dataset Configuration
# =============================================================================

# Dataset cache directory (for storing downloaded datasets)
DATASET_CACHE_DIR=./dataset_cache

# Enable dataset caching in memory (true/false)
# Improves training speed but uses more RAM
ENABLE_DATASET_CACHE=false

# Maximum dataset cache size (in GB)
MAX_DATASET_CACHE_SIZE=10

# =============================================================================
# OPTIONAL: Training Optimization
# =============================================================================

# Enable mixed precision training (true/false)
# Reduces memory usage and speeds up training
ENABLE_AMP=true

# Gradient clipping norm (0 = disabled)
GRADIENT_CLIP_NORM=10.0

# Learning rate warmup epochs
WARMUP_EPOCHS=3

# Early stopping patience (epochs without improvement)
EARLY_STOPPING_PATIENCE=50

# =============================================================================
# OPTIONAL: Export and Deployment
# =============================================================================

# Model export directory
MODEL_EXPORT_DIR=./exported_models

# Enable ONNX export (true/false)
ENABLE_ONNX_EXPORT=true

# Enable TensorRT export (true/false)
# Requires: pip install tensorrt
ENABLE_TENSORRT_EXPORT=false

# Enable CoreML export (true/false)
# Requires: pip install coremltools
ENABLE_COREML_EXPORT=false

# =============================================================================
# OPTIONAL: Advanced Configuration
# =============================================================================

# Enable deterministic training (true/false)
# Slower but more reproducible results
ENABLE_DETERMINISTIC=false

# Enable rectangular training (true/false)
# More efficient for non-square images
ENABLE_RECTANGULAR_TRAINING=false

# Enable single class mode (true/false)
# For single-class object detection
ENABLE_SINGLE_CLASS=false

# Enable mosaic augmentation (true/false)
# Improves training robustness
ENABLE_MOSAIC_AUGMENTATION=true

# =============================================================================
# OPTIONAL: System Configuration
# =============================================================================

# Maximum number of checkpoints to keep
MAX_CHECKPOINTS=5

# Checkpoint save interval (epochs)
CHECKPOINT_SAVE_INTERVAL=10

# Validation interval (epochs)
VALIDATION_INTERVAL=1

# Metrics logging interval (batches)
METRICS_LOG_INTERVAL=20

# =============================================================================
# OPTIONAL: External Services
# =============================================================================

# Hugging Face Hub token (for model uploads)
# Get this from: https://huggingface.co/settings/tokens
HF_TOKEN=your_huggingface_token_here

# MLflow tracking URI (for experiment tracking)
MLFLOW_TRACKING_URI=http://localhost:5000

# =============================================================================
# DEVELOPMENT AND DEBUGGING
# =============================================================================

# Enable debug mode (true/false)
DEBUG_MODE=false

# Enable profiling (true/false)
ENABLE_PROFILING=false

# Enable memory tracking (true/false)
ENABLE_MEMORY_TRACKING=false

# =============================================================================
# NOTES
# =============================================================================

# 1. Copy this file to .env: cp env.example .env
# 2. Fill in your actual values (especially ROBOFLOW_API_KEY)
# 3. Never commit .env file to version control
# 4. Use .env.local for local overrides
# 5. Environment variables can be overridden by command line arguments

# Example usage in Python:
# import os
# from dotenv import load_dotenv
# load_dotenv()
# api_key = os.getenv('ROBOFLOW_API_KEY')
